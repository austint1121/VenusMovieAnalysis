{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recommendation - IMDb Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook will explore the relationship between two features, genre and runtime, and two popularity metrics, viewer rating and the number of viewer ratings. The goal is to find some combination(s) of genre and runtime which provide lift to either of the two popularity metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load relevant packages and the imdb data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# set the movie_id column as the index\n",
    "imdb = pd.read_csv('Data/imdb_data', index_col='movie_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sunghursh2013</th>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Action,Crime,Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>one day before the rainy season2019</th>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Biography,Drama</td>\n",
       "      <td>7.2</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the other side of the wind2018</th>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>122.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sabse bada sukh2018</th>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy,Drama</td>\n",
       "      <td>6.1</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the wandering soap opera2017</th>\n",
       "      <td>The Wandering Soap Opera</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Comedy,Drama,Fantasy</td>\n",
       "      <td>6.5</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       primary_title  \\\n",
       "movie_id                                                               \n",
       "sunghursh2013                                              Sunghursh   \n",
       "one day before the rainy season2019  One Day Before the Rainy Season   \n",
       "the other side of the wind2018            The Other Side of the Wind   \n",
       "sabse bada sukh2018                                  Sabse Bada Sukh   \n",
       "the wandering soap opera2017                The Wandering Soap Opera   \n",
       "\n",
       "                                     runtime_minutes                genres  \\\n",
       "movie_id                                                                     \n",
       "sunghursh2013                                  175.0    Action,Crime,Drama   \n",
       "one day before the rainy season2019            114.0       Biography,Drama   \n",
       "the other side of the wind2018                 122.0                 Drama   \n",
       "sabse bada sukh2018                              NaN          Comedy,Drama   \n",
       "the wandering soap opera2017                    80.0  Comedy,Drama,Fantasy   \n",
       "\n",
       "                                     averagerating  numvotes  \n",
       "movie_id                                                      \n",
       "sunghursh2013                                  7.0      77.0  \n",
       "one day before the rainy season2019            7.2      43.0  \n",
       "the other side of the wind2018                 6.9    4517.0  \n",
       "sabse bada sukh2018                            6.1      13.0  \n",
       "the wandering soap opera2017                   6.5     119.0  "
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take a look\n",
    "imdb.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 146144 entries, sunghursh2013 to chico albuquerque - revelações2013\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count   Dtype  \n",
      "---  ------           --------------   -----  \n",
      " 0   primary_title    146144 non-null  object \n",
      " 1   runtime_minutes  114405 non-null  float64\n",
      " 2   genres           140736 non-null  object \n",
      " 3   averagerating    73856 non-null   float64\n",
      " 4   numvotes         73856 non-null   float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 6.7+ MB\n"
     ]
    }
   ],
   "source": [
    "imdb.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Drop duplicate movie_id's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2161\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ângelo de sousa - tudo o que sou capaz2010    7\n",
       "split2016                                     6\n",
       "inside out2011                                5\n",
       "gone2011                                      4\n",
       "the unseen2017                                4\n",
       "                                             ..\n",
       "foxtrot2017                                   2\n",
       "transit2010                                   2\n",
       "olympia2018                                   2\n",
       "the factory2012                               2\n",
       "here and now2018                              2\n",
       "Name: movie_id, Length: 1953, dtype: int64"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check how many duplicated indices and their identities\n",
    "print(imdb.index.duplicated().sum())\n",
    "imdb.index.value_counts()[imdb.index.value_counts() > 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 1,953 movie_ids which are duplicated 2,161 times in total. Let's investigate a few."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ângelo de sousa - tudo o que sou capaz2010</th>\n",
       "      <td>Ângelo de Sousa - Tudo o Que Sou Capaz</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Biography,Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                     primary_title  \\\n",
       "movie_id                                                                             \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Ângelo de Sousa - Tudo o Que Sou Capaz   \n",
       "\n",
       "                                            runtime_minutes  \\\n",
       "movie_id                                                      \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "ângelo de sousa - tudo o que sou capaz2010             60.0   \n",
       "\n",
       "                                                           genres  \\\n",
       "movie_id                                                            \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "ângelo de sousa - tudo o que sou capaz2010  Biography,Documentary   \n",
       "\n",
       "                                            averagerating  numvotes  \n",
       "movie_id                                                             \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  \n",
       "ângelo de sousa - tudo o que sou capaz2010            NaN       NaN  "
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc['ângelo de sousa - tudo o que sou capaz2010']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>90.0</td>\n",
       "      <td>Comedy,Romance,Sport</td>\n",
       "      <td>2.9</td>\n",
       "      <td>557.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>127.0</td>\n",
       "      <td>Drama,Fantasy</td>\n",
       "      <td>3.6</td>\n",
       "      <td>380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Crime</td>\n",
       "      <td>6.8</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>117.0</td>\n",
       "      <td>Horror,Thriller</td>\n",
       "      <td>7.3</td>\n",
       "      <td>358543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2016</th>\n",
       "      <td>Split</td>\n",
       "      <td>123.0</td>\n",
       "      <td>Action,Drama,Sport</td>\n",
       "      <td>5.4</td>\n",
       "      <td>189.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          primary_title  runtime_minutes                genres  averagerating  \\\n",
       "movie_id                                                                        \n",
       "split2016         Split             90.0  Comedy,Romance,Sport            2.9   \n",
       "split2016         Split            127.0         Drama,Fantasy            3.6   \n",
       "split2016         Split              NaN                 Crime            6.8   \n",
       "split2016         Split            117.0       Horror,Thriller            7.3   \n",
       "split2016         Split             80.0                 Drama            7.0   \n",
       "split2016         Split            123.0    Action,Drama,Sport            5.4   \n",
       "\n",
       "           numvotes  \n",
       "movie_id             \n",
       "split2016     557.0  \n",
       "split2016     380.0  \n",
       "split2016       5.0  \n",
       "split2016  358543.0  \n",
       "split2016      21.0  \n",
       "split2016     189.0  "
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc['split2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>inside out2011</th>\n",
       "      <td>Inside Out</td>\n",
       "      <td>93.0</td>\n",
       "      <td>Crime,Drama</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1566.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inside out2011</th>\n",
       "      <td>Inside Out</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inside out2011</th>\n",
       "      <td>Inside Out</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inside out2011</th>\n",
       "      <td>Inside Out</td>\n",
       "      <td>59.0</td>\n",
       "      <td>Family</td>\n",
       "      <td>7.3</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inside out2011</th>\n",
       "      <td>Inside Out</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               primary_title  runtime_minutes       genres  averagerating  \\\n",
       "movie_id                                                                    \n",
       "inside out2011    Inside Out             93.0  Crime,Drama            4.6   \n",
       "inside out2011    Inside Out             74.0  Documentary            NaN   \n",
       "inside out2011    Inside Out              NaN        Drama            NaN   \n",
       "inside out2011    Inside Out             59.0       Family            7.3   \n",
       "inside out2011    Inside Out              NaN          NaN            NaN   \n",
       "\n",
       "                numvotes  \n",
       "movie_id                  \n",
       "inside out2011    1566.0  \n",
       "inside out2011       NaN  \n",
       "inside out2011       NaN  \n",
       "inside out2011      15.0  \n",
       "inside out2011       NaN  "
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc['inside out2011']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>reaper2014</th>\n",
       "      <td>Reaper</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Fantasy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reaper2014</th>\n",
       "      <td>Reaper</td>\n",
       "      <td>90.0</td>\n",
       "      <td>Crime,Horror,Sci-Fi</td>\n",
       "      <td>5.1</td>\n",
       "      <td>2772.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           primary_title  runtime_minutes               genres  averagerating  \\\n",
       "movie_id                                                                        \n",
       "reaper2014        Reaper             80.0              Fantasy            NaN   \n",
       "reaper2014        Reaper             90.0  Crime,Horror,Sci-Fi            5.1   \n",
       "\n",
       "            numvotes  \n",
       "movie_id              \n",
       "reaper2014       NaN  \n",
       "reaper2014    2772.0  "
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc['reaper2014']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sacrifice2010</th>\n",
       "      <td>Sacrifice</td>\n",
       "      <td>67.0</td>\n",
       "      <td>Sci-Fi</td>\n",
       "      <td>5.9</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sacrifice2010</th>\n",
       "      <td>Sacrifice</td>\n",
       "      <td>122.0</td>\n",
       "      <td>Drama,History</td>\n",
       "      <td>6.2</td>\n",
       "      <td>2029.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              primary_title  runtime_minutes         genres  averagerating  \\\n",
       "movie_id                                                                     \n",
       "sacrifice2010     Sacrifice             67.0         Sci-Fi            5.9   \n",
       "sacrifice2010     Sacrifice            122.0  Drama,History            6.2   \n",
       "\n",
       "               numvotes  \n",
       "movie_id                 \n",
       "sacrifice2010      47.0  \n",
       "sacrifice2010    2029.0  "
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc['sacrifice2010']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It appears in these cases that one movie has significantly more votes, as indicated by the `numvotes` column, than the others that share a movie_id. This may be because only one of the movies is legitimate and the others are mistaken duplicates. It could also be that there are two or more different movies with the same name that came out the same year. Whatever the case may be, our strategy will be to remove all movie_ids other than the one with the most number of votes. If the movie_id is a mistaken duplicate, we don't want that information leaking into our analysis. If it is not a mistake, we will lose some data on the less popular movies, but that is an acceptable cost given the small number of duplicates and the greater cost of mistaken duplicate information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 73856 entries, sunghursh2013 to drømmeland2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   primary_title    73856 non-null  object \n",
      " 1   runtime_minutes  66236 non-null  float64\n",
      " 2   genres           73052 non-null  object \n",
      " 3   averagerating    73856 non-null  float64\n",
      " 4   numvotes         73856 non-null  float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 3.4+ MB\n"
     ]
    }
   ],
   "source": [
    "# drop rows with missing values in the numvotes column\n",
    "imdb = imdb.dropna(axis=0, subset=['numvotes'])\n",
    "imdb.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bad & the birdieman2016                        2\n",
       "arjuna2015                                     2\n",
       "little heroes2017                              2\n",
       "the island of doctor moron®2016                1\n",
       "the philadelphia bicycle vignette story2017    1\n",
       "                                              ..\n",
       "matt's chance2013                              1\n",
       "beyond evil: the dead of night2015             1\n",
       "farmer of the year2018                         1\n",
       "gop-stop2011                                   1\n",
       "american hero2015                              1\n",
       "Name: movie_id, Length: 73264, dtype: int64"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop duplicate movie_id's if they don't have the max number of votes for that movie_id\n",
    "max_votes_id = imdb.groupby('movie_id')['numvotes'].transform(max) == imdb['numvotes']\n",
    "imdb = imdb[max_votes_id]\n",
    "\n",
    "# check the result\n",
    "imdb.index.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 73267 entries, sunghursh2013 to drømmeland2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   primary_title    73267 non-null  object \n",
      " 1   runtime_minutes  65720 non-null  float64\n",
      " 2   genres           72475 non-null  object \n",
      " 3   averagerating    73267 non-null  float64\n",
      " 4   numvotes         73267 non-null  float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 3.4+ MB\n"
     ]
    }
   ],
   "source": [
    "imdb.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are still 3 duplicates. Let's check those."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bad &amp; the birdieman2016</th>\n",
       "      <td>Bad &amp; the Birdieman</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>3.2</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bad &amp; the birdieman2016</th>\n",
       "      <td>Bad &amp; the Birdieman</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>4.7</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arjuna2015</th>\n",
       "      <td>Arjuna</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>6.8</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arjuna2015</th>\n",
       "      <td>Arjuna</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Action,Crime,Drama</td>\n",
       "      <td>4.8</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>little heroes2017</th>\n",
       "      <td>Little Heroes</td>\n",
       "      <td>76.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>7.6</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>little heroes2017</th>\n",
       "      <td>Little Heroes</td>\n",
       "      <td>95.0</td>\n",
       "      <td>Action,Adventure,Comedy</td>\n",
       "      <td>5.3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               primary_title  runtime_minutes  \\\n",
       "movie_id                                                        \n",
       "bad & the birdieman2016  Bad & the Birdieman              NaN   \n",
       "bad & the birdieman2016  Bad & the Birdieman             52.0   \n",
       "arjuna2015                            Arjuna             75.0   \n",
       "arjuna2015                            Arjuna              NaN   \n",
       "little heroes2017              Little Heroes             76.0   \n",
       "little heroes2017              Little Heroes             95.0   \n",
       "\n",
       "                                          genres  averagerating  numvotes  \n",
       "movie_id                                                                   \n",
       "bad & the birdieman2016              Documentary            3.2       6.0  \n",
       "bad & the birdieman2016              Documentary            4.7       6.0  \n",
       "arjuna2015                                 Drama            6.8       6.0  \n",
       "arjuna2015                    Action,Crime,Drama            4.8       6.0  \n",
       "little heroes2017                      Animation            7.6       9.0  \n",
       "little heroes2017        Action,Adventure,Comedy            5.3       9.0  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.loc[['bad & the birdieman2016', 'arjuna2015', 'little heroes2017']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will drop the two records without a runtime. We will keep both of the \"little heroes2017\" records. There are in fact two movies from 2017 named \"Little Heroes.\" This is an example of data that might have been lost in the previous drop operation, but we'll keep this time since it could be easily inspected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 73265 entries, sunghursh2013 to drømmeland2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   primary_title    73265 non-null  object \n",
      " 1   runtime_minutes  65720 non-null  float64\n",
      " 2   genres           72473 non-null  object \n",
      " 3   averagerating    73265 non-null  float64\n",
      " 4   numvotes         73265 non-null  float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 3.4+ MB\n"
     ]
    }
   ],
   "source": [
    "# filter the rows to remove those with the selected indices and NaN runtimes\n",
    "keep_id = ((imdb.index != 'arjuna2015') & (imdb.index != 'bad & the birdieman2016')) | (imdb['runtime_minutes'].notnull())\n",
    "imdb = imdb[keep_id]\n",
    "\n",
    "# check result\n",
    "imdb.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our cleaned DataFrame has 73,265 entries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unpack Genres"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a look at the genres column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sunghursh2013</th>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Action,Crime,Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>one day before the rainy season2019</th>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Biography,Drama</td>\n",
       "      <td>7.2</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the other side of the wind2018</th>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>122.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sabse bada sukh2018</th>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy,Drama</td>\n",
       "      <td>6.1</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the wandering soap opera2017</th>\n",
       "      <td>The Wandering Soap Opera</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Comedy,Drama,Fantasy</td>\n",
       "      <td>6.5</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       primary_title  \\\n",
       "movie_id                                                               \n",
       "sunghursh2013                                              Sunghursh   \n",
       "one day before the rainy season2019  One Day Before the Rainy Season   \n",
       "the other side of the wind2018            The Other Side of the Wind   \n",
       "sabse bada sukh2018                                  Sabse Bada Sukh   \n",
       "the wandering soap opera2017                The Wandering Soap Opera   \n",
       "\n",
       "                                     runtime_minutes                genres  \\\n",
       "movie_id                                                                     \n",
       "sunghursh2013                                  175.0    Action,Crime,Drama   \n",
       "one day before the rainy season2019            114.0       Biography,Drama   \n",
       "the other side of the wind2018                 122.0                 Drama   \n",
       "sabse bada sukh2018                              NaN          Comedy,Drama   \n",
       "the wandering soap opera2017                    80.0  Comedy,Drama,Fantasy   \n",
       "\n",
       "                                     averagerating  numvotes  \n",
       "movie_id                                                      \n",
       "sunghursh2013                                  7.0      77.0  \n",
       "one day before the rainy season2019            7.2      43.0  \n",
       "the other side of the wind2018                 6.9    4517.0  \n",
       "sabse bada sukh2018                            6.1      13.0  \n",
       "the wandering soap opera2017                   6.5     119.0  "
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The genres column contains what appears to be a list of genres. Let's investigate and unpack that using the `explode` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(imdb['genres'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each value in the genres column is actually a string of genres separated by `,`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sunghursh2013</th>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sunghursh2013</th>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Crime</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sunghursh2013</th>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>one day before the rainy season2019</th>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Biography</td>\n",
       "      <td>7.2</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>one day before the rainy season2019</th>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.2</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       primary_title  \\\n",
       "movie_id                                                               \n",
       "sunghursh2013                                              Sunghursh   \n",
       "sunghursh2013                                              Sunghursh   \n",
       "sunghursh2013                                              Sunghursh   \n",
       "one day before the rainy season2019  One Day Before the Rainy Season   \n",
       "one day before the rainy season2019  One Day Before the Rainy Season   \n",
       "\n",
       "                                     runtime_minutes     genres  \\\n",
       "movie_id                                                          \n",
       "sunghursh2013                                  175.0     Action   \n",
       "sunghursh2013                                  175.0      Crime   \n",
       "sunghursh2013                                  175.0      Drama   \n",
       "one day before the rainy season2019            114.0  Biography   \n",
       "one day before the rainy season2019            114.0      Drama   \n",
       "\n",
       "                                     averagerating  numvotes  \n",
       "movie_id                                                      \n",
       "sunghursh2013                                  7.0      77.0  \n",
       "sunghursh2013                                  7.0      77.0  \n",
       "sunghursh2013                                  7.0      77.0  \n",
       "one day before the rainy season2019            7.2      43.0  \n",
       "one day before the rainy season2019            7.2      43.0  "
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# split the genres string on \",\" into a list of strings\n",
    "imdb['genres'] = imdb['genres'].str.split(',')\n",
    "\n",
    "# explode the genres column into rows for each genre\n",
    "imdb = imdb.explode('genres')\n",
    "\n",
    "#check result\n",
    "imdb.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 128305 entries, sunghursh2013 to drømmeland2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count   Dtype  \n",
      "---  ------           --------------   -----  \n",
      " 0   primary_title    128305 non-null  object \n",
      " 1   runtime_minutes  118068 non-null  float64\n",
      " 2   genres           127513 non-null  object \n",
      " 3   averagerating    128305 non-null  float64\n",
      " 4   numvotes         128305 non-null  float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 5.9+ MB\n"
     ]
    }
   ],
   "source": [
    "imdb.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After exploding the `genres` column, there are 128,305 entries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of Number of Votes for Animations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's work with our recommendation of animated movies and see how the number of votes is related to runtime.\n",
    "\n",
    "# (Something about the correlation of number of votes to financial metric.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1739 entries, joe finds grace2017 to the pilgrim's progress2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   primary_title    1739 non-null   object \n",
      " 1   runtime_minutes  1613 non-null   float64\n",
      " 2   genres           1739 non-null   object \n",
      " 3   averagerating    1739 non-null   float64\n",
      " 4   numvotes         1739 non-null   float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 81.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# filter animated movies\n",
    "animated = imdb[imdb['genres'] == 'Animation']\n",
    "\n",
    "# check info\n",
    "animated.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 1,739 animated movies, 1,613 of which have a runtime. Let's drop those without one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1613 entries, joe finds grace2017 to the pilgrim's progress2019\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   primary_title    1613 non-null   object \n",
      " 1   runtime_minutes  1613 non-null   float64\n",
      " 2   genres           1613 non-null   object \n",
      " 3   averagerating    1613 non-null   float64\n",
      " 4   numvotes         1613 non-null   float64\n",
      "dtypes: float64(3), object(2)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "# drop animated movies without a runtime\n",
    "animated = animated.dropna(subset=['runtime_minutes'])\n",
    "\n",
    "# check\n",
    "animated.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create bins for runtime minutes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `runtime_minutes` column is currently a continuous variable. We are going to bin this variable to allow for group and barplot creation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "      <th>runtime_bins</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>joe finds grace2017</th>\n",
       "      <td>Joe Finds Grace</td>\n",
       "      <td>83.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>8.1</td>\n",
       "      <td>263.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the tragedy of man2011</th>\n",
       "      <td>The Tragedy of Man</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>7.8</td>\n",
       "      <td>584.0</td>\n",
       "      <td>150+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foodfight!2012</th>\n",
       "      <td>Foodfight!</td>\n",
       "      <td>91.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>1.9</td>\n",
       "      <td>8248.0</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>quantum quest: a cassini space odyssey2010</th>\n",
       "      <td>Quantum Quest: A Cassini Space Odyssey</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>5.1</td>\n",
       "      <td>287.0</td>\n",
       "      <td>&lt;60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bunyan and babe2017</th>\n",
       "      <td>Bunyan and Babe</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>5.0</td>\n",
       "      <td>302.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                     primary_title  \\\n",
       "movie_id                                                                             \n",
       "joe finds grace2017                                                Joe Finds Grace   \n",
       "the tragedy of man2011                                          The Tragedy of Man   \n",
       "foodfight!2012                                                          Foodfight!   \n",
       "quantum quest: a cassini space odyssey2010  Quantum Quest: A Cassini Space Odyssey   \n",
       "bunyan and babe2017                                                Bunyan and Babe   \n",
       "\n",
       "                                            runtime_minutes     genres  \\\n",
       "movie_id                                                                 \n",
       "joe finds grace2017                                    83.0  Animation   \n",
       "the tragedy of man2011                                160.0  Animation   \n",
       "foodfight!2012                                         91.0  Animation   \n",
       "quantum quest: a cassini space odyssey2010             45.0  Animation   \n",
       "bunyan and babe2017                                    84.0  Animation   \n",
       "\n",
       "                                            averagerating  numvotes  \\\n",
       "movie_id                                                              \n",
       "joe finds grace2017                                   8.1     263.0   \n",
       "the tragedy of man2011                                7.8     584.0   \n",
       "foodfight!2012                                        1.9    8248.0   \n",
       "quantum quest: a cassini space odyssey2010            5.1     287.0   \n",
       "bunyan and babe2017                                   5.0     302.0   \n",
       "\n",
       "                                           runtime_bins  \n",
       "movie_id                                                 \n",
       "joe finds grace2017                                  80  \n",
       "the tragedy of man2011                             150+  \n",
       "foodfight!2012                                       90  \n",
       "quantum quest: a cassini space odyssey2010          <60  \n",
       "bunyan and babe2017                                  80  "
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create bins for runtime\n",
    "labels = ['<60', 60, 70, 80, 90, 100, 110, 120, 130, 140, '150+']\n",
    "bins = [0, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, max(animated['runtime_minutes'])]\n",
    "animated['runtime_bins'] = pd.cut(animated['runtime_minutes'], bins=bins, labels=labels)\n",
    "\n",
    "# take a look\n",
    "animated.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<60     153\n",
       "60      135\n",
       "70      326\n",
       "80      448\n",
       "90      298\n",
       "100     134\n",
       "110      71\n",
       "120      22\n",
       "130      14\n",
       "140       5\n",
       "150+      7\n",
       "Name: runtime_bins, dtype: int64"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "animated['runtime_bins'].value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the distribution of bins above. They are relatively equal sized, except for the movies over 2 hours. Let's redo the bins with 120+ as the max bin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>primary_title</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "      <th>runtime_bins</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>joe finds grace2017</th>\n",
       "      <td>Joe Finds Grace</td>\n",
       "      <td>83.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>8.1</td>\n",
       "      <td>263.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>the tragedy of man2011</th>\n",
       "      <td>The Tragedy of Man</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>7.8</td>\n",
       "      <td>584.0</td>\n",
       "      <td>120+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foodfight!2012</th>\n",
       "      <td>Foodfight!</td>\n",
       "      <td>91.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>1.9</td>\n",
       "      <td>8248.0</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>quantum quest: a cassini space odyssey2010</th>\n",
       "      <td>Quantum Quest: A Cassini Space Odyssey</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>5.1</td>\n",
       "      <td>287.0</td>\n",
       "      <td>&lt;60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bunyan and babe2017</th>\n",
       "      <td>Bunyan and Babe</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Animation</td>\n",
       "      <td>5.0</td>\n",
       "      <td>302.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                     primary_title  \\\n",
       "movie_id                                                                             \n",
       "joe finds grace2017                                                Joe Finds Grace   \n",
       "the tragedy of man2011                                          The Tragedy of Man   \n",
       "foodfight!2012                                                          Foodfight!   \n",
       "quantum quest: a cassini space odyssey2010  Quantum Quest: A Cassini Space Odyssey   \n",
       "bunyan and babe2017                                                Bunyan and Babe   \n",
       "\n",
       "                                            runtime_minutes     genres  \\\n",
       "movie_id                                                                 \n",
       "joe finds grace2017                                    83.0  Animation   \n",
       "the tragedy of man2011                                160.0  Animation   \n",
       "foodfight!2012                                         91.0  Animation   \n",
       "quantum quest: a cassini space odyssey2010             45.0  Animation   \n",
       "bunyan and babe2017                                    84.0  Animation   \n",
       "\n",
       "                                            averagerating  numvotes  \\\n",
       "movie_id                                                              \n",
       "joe finds grace2017                                   8.1     263.0   \n",
       "the tragedy of man2011                                7.8     584.0   \n",
       "foodfight!2012                                        1.9    8248.0   \n",
       "quantum quest: a cassini space odyssey2010            5.1     287.0   \n",
       "bunyan and babe2017                                   5.0     302.0   \n",
       "\n",
       "                                           runtime_bins  \n",
       "movie_id                                                 \n",
       "joe finds grace2017                                  80  \n",
       "the tragedy of man2011                             120+  \n",
       "foodfight!2012                                       90  \n",
       "quantum quest: a cassini space odyssey2010          <60  \n",
       "bunyan and babe2017                                  80  "
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create bins for runtime\n",
    "labels = ['<60', 60, 70, 80, 90, 100, 110, '120+']\n",
    "bins = [0, 60, 70, 80, 90, 100, 110, 120, max(animated['runtime_minutes'])]\n",
    "animated['runtime_bins'] = pd.cut(animated['runtime_minutes'], bins=bins, labels=labels)\n",
    "\n",
    "# take a look\n",
    "animated.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<60     153\n",
       "60      135\n",
       "70      326\n",
       "80      448\n",
       "90      298\n",
       "100     134\n",
       "110      71\n",
       "120+     48\n",
       "Name: runtime_bins, dtype: int64"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "animated['runtime_bins'].value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make some graphs!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create some helpful functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following functions will be used to help make various graphs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create function to automate group creation\n",
    "def create_group(df, groups, aggregation, sortby):\n",
    "    grouped_df = df.groupby(groups).agg(aggregation).sort_values(sortby, ascending=False)\n",
    "    return grouped_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create function for passing percentiles to create_group function\n",
    "def percentile(n):\n",
    "    def percentile_(x):\n",
    "        return x.quantile(n)\n",
    "    return percentile_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create function to automate barplot creation\n",
    "def make_barplot(df, height, title, xlabel, ylabel):\n",
    "    # define figure/axis\n",
    "    fig, ax = plt.subplots(figsize=(15,10))\n",
    "    \n",
    "    # create visual\n",
    "    ax = sns.barplot(\n",
    "        data = df,\n",
    "        x = df.index,\n",
    "        y = height,\n",
    "        color= '#75bbfd'\n",
    "    )\n",
    "    \n",
    "    # set title and axis labels\n",
    "    ax.set_title(title)\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel(ylabel)\n",
    "    \n",
    "    # set yticklabels to have ',' in the numbers\n",
    "    yticklabels = [f'{tick:,.0f}' for tick in ax.get_yticks()]\n",
    "    ax.set_yticklabels(yticklabels)\n",
    "\n",
    "    # show the vertical gridlines\n",
    "    ax.xaxis.grid(True)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    \n",
    "    return fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Number of Votes by Runtime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      1613.000000\n",
       "mean       9514.907006\n",
       "std       47060.914737\n",
       "min           5.000000\n",
       "25%          26.000000\n",
       "50%         121.000000\n",
       "75%         825.000000\n",
       "max      682218.000000\n",
       "Name: numvotes, dtype: float64"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take a look at descriptive statistics\n",
    "animated['numvotes'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram for number of votes\n",
    "animated['numvotes'].hist();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see from the histogram and descriptive statistics that the number of votes is highly skewed. The average will not be a useful metric for analyzing this column. We will use the median and quantiles to describe this feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 90th percentile votes by runtime for animation\n",
    "animated_rt_90th_votes = create_group(animated, groups='runtime_bins', aggregation=percentile(.9), sortby='numvotes')\n",
    "\n",
    "# median votes by runtime for animation\n",
    "animated_rt_median_votes = create_group(animated, groups='runtime_bins', aggregation='median', sortby='numvotes')\n",
    "\n",
    "# 10th percentile votes by runtime for animation\n",
    "animated_rt_10th_votes = create_group(animated, groups='runtime_bins', aggregation=percentile(.1), sortby='numvotes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set Seaborn style\n",
    "sns.set_theme(context='talk')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-268-2dcf07cabcc4>:21: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(yticklabels)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "animated_rt_90th_votes_plot = make_barplot(animated_rt_90th_votes,                                               \n",
    "                                           height='numvotes',\n",
    "                                           title='Best Case Number of Votes by Runtime for Animated Movies',\n",
    "                                           xlabel='Runtime (minutes)',\n",
    "                                           ylabel='Number of Votes'\n",
    "                                          )\n",
    "animated_rt_90th_votes_plot.savefig('animation_90th')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-268-2dcf07cabcc4>:21: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(yticklabels)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "animated_rt_median_votes_plot = make_barplot(animated_rt_median_votes,                                             \n",
    "                                             height='numvotes',\n",
    "                                             title='Typical Number of Votes by Runtime for Animated Movies',\n",
    "                                             xlabel='Runtime (minutes)',\n",
    "                                             ylabel='Number of Votes'\n",
    "                                             )\n",
    "\n",
    "animated_rt_median_votes_plot.savefig('animation_median')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-268-2dcf07cabcc4>:21: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(yticklabels)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "animated_rt_10th_votes_plot = make_barplot(animated_rt_10th_votes,                                               \n",
    "                                           height='numvotes',\n",
    "                                           title='Worst Case Number of Votes by Runtime for Animated Movies',\n",
    "                                           xlabel='Runtime (minutes)',\n",
    "                                           ylabel='Number of Votes'\n",
    "                                          )\n",
    "animated_rt_10th_votes_plot.savefig('animation_10th')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 100-minute runtime is best in all cases. Next, let's calculate the lift in number of votes we get for a 100-minute movie."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lift(ingroup, base_rate):\n",
    "    return ((ingroup / base_rate) - 1) *100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100-minute median: 784\n",
      "overall median: 121\n",
      "lift: 548%\n"
     ]
    }
   ],
   "source": [
    "# median number of votes for 100-minute animations\n",
    "rt_100_median_votes = animated_rt_median_votes.loc[100]['numvotes']\n",
    "\n",
    "# median number of votes for all animations\n",
    "rt_median_votes = animated['numvotes'].median()\n",
    "\n",
    "# lift\n",
    "median_votes_lift = lift(rt_100_median_votes, rt_median_votes)\n",
    "\n",
    "print(f'100-minute median: {rt_100_median_votes:.0f}\\n' \\\n",
    "      f'overall median: {rt_median_votes:.0f}\\n' \\\n",
    "      f'lift: {median_votes_lift:.0f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100-minute 90th: 116288\n",
      "overall 90th: 7413\n",
      "lift: 1469%\n"
     ]
    }
   ],
   "source": [
    "# 90th percentile number of votes for 100-minute animations\n",
    "rt_100_90th_votes = animated_rt_90th_votes.loc[100]['numvotes']\n",
    "\n",
    "# 90th percentile number of votes for all animations\n",
    "rt_90th_votes = animated['numvotes'].quantile(0.9)\n",
    "\n",
    "# lift\n",
    "p90th_votes_lift = lift(rt_100_90th_votes, rt_90th_votes)\n",
    "\n",
    "print(f'100-minute 90th: {rt_100_90th_votes:.0f}\\n' \\\n",
    "      f'overall 90th: {rt_90th_votes:.0f}\\n' \\\n",
    "      f'lift: {p90th_votes_lift:.0f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100-minute 10th: 22\n",
      "overall 10th: 10\n",
      "lift: 119%\n"
     ]
    }
   ],
   "source": [
    "# 10th percentile number of votes for 100-minute animations\n",
    "rt_100_10th_votes = animated_rt_10th_votes.loc[100]['numvotes']\n",
    "\n",
    "# 10th percentile number of votes for all animations\n",
    "rt_10th_votes = animated['numvotes'].quantile(0.1)\n",
    "\n",
    "# lift\n",
    "p10th_votes_lift = lift(rt_100_10th_votes, rt_10th_votes)\n",
    "\n",
    "print(f'100-minute 10th: {rt_100_10th_votes:.0f}\\n' \\\n",
    "      f'overall 10th: {rt_10th_votes:.0f}\\n' \\\n",
    "      f'lift: {p10th_votes_lift:.0f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recommendation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**We recommend that the runtime for an animation movie be about 100 minutes.**\n",
    "\n",
    "The 90th, 50th, and 10th percentile outcome for an animation with a runtime of 100 minutes is superior to its peers.\n",
    "\n",
    "**Typically, a 100-minute animation increases the number of votes by 548%, or 6.48x.**\n",
    "**In the best cases, a 100-minute animation yields a 15.69x multiple.**\n",
    "**Even in the worst cases, a 100-minute animation is 2.29x better than its peers.**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (learn-env)",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
